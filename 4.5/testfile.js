pm.test('Check status', () => {
    const res = pm.response.json();
    pm.expect(res['version']).to.equal(pm.iterationData.get('version'))
    //pm.expect(res['TransactionId']).to.equal(pm.iterationData.get('TransactionId'))
    pm.expect(res['Version']).to.equal(pm.iterationData.get('Version'))
    pm.expect(res['QueryStatusCodeValue']).to.equal(pm.iterationData.get('QueryStatusCodeValue'))
    pm.expect(res['MicroMatchStatus']).to.equal(pm.iterationData.get('MicroMatchStatus'))
    pm.expect(res['PenaltyCode']).to.equal(pm.iterationData.get('PenaltyCode'))
    pm.expect(res['PenaltyCodeSummary']).to.equal(pm.iterationData.get('PenaltyCodeSummary'))
    pm.expect(res['GeoLocationID']).to.equal(pm.iterationData.get('GeoLocationID'))
    pm.expect(res['FeatureMatchingResultType']).to.equal(pm.iterationData.get('FeatureMatchingResultType'))
    pm.expect(res['FeatureMatchingResultCount']).to.equal(pm.iterationData.get('FeatureMatchingResultCount'))
    //pm.expect(res['TimeTaken']).to.equal(pm.iterationData.get('TimeTaken'))
    pm.expect(res['ExceptionOccured']).to.equal(pm.iterationData.get('ExceptionOccured'))
    pm.expect(res['Exception']).to.equal(pm.iterationData.get('Exception'))
});

pm.test('Verify InputAddress', () => {
    const res = pm.response.json();
    pm.expect(res['InputAddress']['StreetAddress']).to.equal(pm.iterationData.get('InputAddress_StreetAddress'))
    pm.expect(res['InputAddress']['City']).to.equal(pm.iterationData.get('InputAddress_City'))
    pm.expect(res['InputAddress']['State']).to.equal(pm.iterationData.get('InputAddress_State'))
    pm.expect(res['InputAddress']['Zip']).to.equal(pm.iterationData.get('InputAddress_Zip'))
});

pm.test('Verify outputGeocode', () => {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['Latitude']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_Latitude'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['Longitude']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_Longitude'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['NAACCRGISCoordinateQualityCode']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_NAACCRGISCoordinateQualityCode'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['NAACCRGISCoordinateQualityType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_NAACCRGISCoordinateQualityType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['NAACCRCensusTractCertaintyCode']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_NAACCRCensusTractCertaintyCode'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['NAACCRCensusTractCertaintyType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_NAACCRCensusTractCertaintyType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchScore']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchScore'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MicroMatchStatus']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MicroMatchStatus'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['PenaltyCode']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_PenaltyCode'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['PenaltyCodeSummary']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_PenaltyCodeSummary'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['GeoLocationID']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_GeoLocationID'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['FeatureMatchingResultType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_FeatureMatchingResultType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['FeatureMatchingResultCount']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_FeatureMatchingResultCount'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['FeatureMatchingGeographyType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_FeatureMatchingGeographyType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['RegionSize']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_RegionSize'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['RegionSizeUnits']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_RegionSizeUnits'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedLocationType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedLocationType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ExceptionOccured']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ExceptionOccured'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['Exception']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_Exception'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ErrorMessage']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ErrorMessage'))
});

pm.test('Verify outputGeocode - ParsedAddress', () => {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['Name']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_Name'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['Number']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_Number'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['NumberFractional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_NumberFractional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PreDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PreDirectional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PreQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PreQualifier'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PreType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PreType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PreArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PreArticle'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PostArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PostArticle'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PostQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PostQualifier'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['Suffix']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_Suffix'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PostDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PostDirectional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['SuiteType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_SuiteType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['SuiteNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_SuiteNumber'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PostOfficeBoxType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PostOfficeBoxType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['PostOfficeBoxNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_PostOfficeBoxNumber'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['City']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_City'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['ConsolidatedCity']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_ConsolidatedCity'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['MinorCivilDivision']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_MinorCivilDivision'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['CountySubRegion']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_CountySubRegion'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['County']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_County'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['State']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_State'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['Zip']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_Zip'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['ZipPlus1']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_ZipPlus1'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['ZipPlus2']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_ZipPlus2'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['ZipPlus3']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_ZipPlus3'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['ZipPlus4']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_ZipPlus4'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ParsedAddress']['ZipPlus5']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ParsedAddress_ZipPlus5'))
});

pm.test('Verify outputGeocode - MatchedAddress', () => {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['Name']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_Name'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['Number']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_Number'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['NumberFractional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_NumberFractional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PreDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PreDirectional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PreQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PreQualifier'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PreType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PreType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PreArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PreArticle'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PostArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PostArticle'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PostQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PostQualifier'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['Suffix']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_Suffix'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PostDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PostDirectional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['SuiteType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_SuiteType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['SuiteNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_SuiteNumber'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PostOfficeBoxType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PostOfficeBoxType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['PostOfficeBoxNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_PostOfficeBoxNumber'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['City']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_City'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['ConsolidatedCity']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_ConsolidatedCity'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['MinorCivilDivision']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_MinorCivilDivision'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['CountySubRegion']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_CountySubRegion'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['County']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_County'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['State']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_State'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['Zip']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_Zip'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['ZipPlus1']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_ZipPlus1'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['ZipPlus2']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_ZipPlus2'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['ZipPlus3']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_ZipPlus3'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['ZipPlus4']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_ZipPlus4'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedAddress']['ZipPlus5']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedAddress_ZipPlus5'))
});

pm.test('Verify outputGeocode - MatchedAddress', () => {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Name']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Name'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Number']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Number'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['NumberFractional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_NumberFractional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PreDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PreDirectional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PreQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PreQualifier'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PreType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PreType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PreArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PreArticle'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PostArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PostArticle'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PostQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PostQualifier'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Suffix']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Suffix'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PostDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PostDirectional'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['SuiteType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_SuiteType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['SuiteNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_SuiteNumber'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PostOfficeBoxType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PostOfficeBoxType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PostOfficeBoxNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PostOfficeBoxNumber'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['City']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_City'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['ConsolidatedCity']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_ConsolidatedCity'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['MinorCivilDivision']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_MinorCivilDivision'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['CountySubRegion']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_CountySubRegion'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['County']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_County'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['State']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_State'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Zip']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Zip'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['ZipPlus1']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_ZipPlus1'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['ZipPlus2']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_ZipPlus2'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['ZipPlus3']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_ZipPlus3'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['ZipPlus4']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_ZipPlus4'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['ZipPlus5']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_ZipPlus5'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Area']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Area'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['AreaType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_AreaType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['GeometrySRID']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_GeometrySRID'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Geometry']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Geometry'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Source']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Source'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['Vintage']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_Vintage'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PrimaryIdField']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PrimaryIdField'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['PrimaryIdValue']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_PrimaryIdValue'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['SecondaryIdField']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_SecondaryIdField'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ReferenceFeature']['SecondaryIdValue']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ReferenceFeature_SecondaryIdValue'))
});