pm.test("General Info", function () {
    const res = pm.response.json();
    pm.expect(res['version']).to.equal(pm.iterationData.get('version'))
    pm.expect(res['TransactionId']).to.equal(pm.iterationData.get('TransactionId'))
    pm.expect(res['Version']).to.equal(pm.iterationData.get('Version'))
    pm.expect(res['QueryStatusCodeValue']).to.equal(pm.iterationData.get('QueryStatusCodeValue'))
    pm.expect(res['MicroMatchStatus']).to.equal(pm.iterationData.get('MicroMatchStatus'))
    pm.expect(res['FeatureMatchingResultType']).to.equal(pm.iterationData.get('FeatureMatchingResultType'))
    pm.expect(res['FeatureMatchingResultCount']).to.equal(pm.iterationData.get('FeatureMatchingResultCount'))
    pm.expect(res['TimeTaken']).to.equal(pm.iterationData.get('TimeTaken'))
    pm.expect(res['ExceptionOccured']).to.equal(pm.iterationData.get('ExceptionOccured'))
    pm.expect(res['Exception']).to.equal(pm.iterationData.get('Exception'))

});

pm.test("InputAddress", function () {
    const res = pm.response.json();
    pm.expect(res['InputAddress']['StreetAddress']).to.equal(pm.iterationData.get('InputAddress_StreetAddress'))
    pm.expect(res['InputAddress']['City']).to.equal(pm.iterationData.get('InputAddress_City'))
    pm.expect(res['InputAddress']['State']).to.equal(pm.iterationData.get('InputAddress_State'))
    pm.expect(res['InputAddress']['Zip']).to.equal(pm.iterationData.get('InputAddress_Zip'))

});
pm.test("OutputGeocodes", function () {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['Latitude']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_Latitude'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['Longitude']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_Longitude'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['NAACCRGISCoordinateQualityCode']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_NAACCRGISCoordinateQualityCode'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['NAACCRGISCoordinateQualityType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_NAACCRGISCoordinateQualityType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchScore']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchScore'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MicroMatchStatus']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MicroMatchStatus'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['FeatureMatchingResultType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_FeatureMatchingResultType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['FeatureMatchingResultCount']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_FeatureMatchingResultCount'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['FeatureMatchingGeographyType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_FeatureMatchingGeographyType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['RegionSize']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_RegionSize'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['RegionSizeUnits']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_RegionSizeUnits'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['MatchedLocationType']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_MatchedLocationType'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ExceptionOccured']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ExceptionOccured'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['Exception']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_Exception'))
    pm.expect(res['OutputGeocodes'][0]['OutputGeocode']['ErrorMessage']).to.equal(pm.iterationData.get('OutputGeocodes_0_OutputGeocode_ErrorMessage'))

});
pm.test("ParsedAddress", function () {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['Name']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_Name'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['Number']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_Number'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['NumberFractional']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_NumberFractional'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PreDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PreDirectional'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PreQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PreQualifier'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PreType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PreType'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PreArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PreArticle'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PostArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PostArticle'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PostQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PostQualifier'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['Suffix']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_Suffix'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PostDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PostDirectional'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['SuiteType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_SuiteType'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['SuiteNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_SuiteNumber'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PostOfficeBoxType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PostOfficeBoxType'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['PostOfficeBoxNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_PostOfficeBoxNumber'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['City']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_City'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['ConsolidatedCity']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_ConsolidatedCity'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['MinorCivilDivision']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_MinorCivilDivision'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['CountySubRegion']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_CountySubRegion'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['County']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_County'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['State']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_State'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['Zip']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_Zip'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['ZipPlus1']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_ZipPlus1'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['ZipPlus2']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_ZipPlus2'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['ZipPlus3']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_ZipPlus3'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['ZipPlus4']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_ZipPlus4'))
    pm.expect(res['OutputGeocodes'][0]['ParsedAddress']['ZipPlus5']).to.equal(pm.iterationData.get('OutputGeocodes_0_ParsedAddress_ZipPlus5'))

});
pm.test("MatchedAddress", function () {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['Name']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_Name'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['Number']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_Number'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['NumberFractional']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_NumberFractional'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PreDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PreDirectional'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PreQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PreQualifier'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PreType']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PreType'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PreArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PreArticle'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PostArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PostArticle'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PostQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PostQualifier'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['Suffix']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_Suffix'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PostDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PostDirectional'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['SuiteType']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_SuiteType'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['SuiteNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_SuiteNumber'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PostOfficeBoxType']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PostOfficeBoxType'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['PostOfficeBoxNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_PostOfficeBoxNumber'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['City']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_City'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['ConsolidatedCity']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_ConsolidatedCity'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['MinorCivilDivision']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_MinorCivilDivision'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['CountySubRegion']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_CountySubRegion'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['County']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_County'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['State']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_State'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['Zip']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_Zip'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['ZipPlus1']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_ZipPlus1'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['ZipPlus2']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_ZipPlus2'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['ZipPlus3']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_ZipPlus3'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['ZipPlus4']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_ZipPlus4'))
    pm.expect(res['OutputGeocodes'][0]['MatchedAddress']['ZipPlus5']).to.equal(pm.iterationData.get('OutputGeocodes_0_MatchedAddress_ZipPlus5'))


});
pm.test("ReferenceFeature", function () {
    const res = pm.response.json();
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Name']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Name'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Number']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Number'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['NumberFractional']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_NumberFractional'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PreDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PreDirectional'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PreQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PreQualifier'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PreType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PreType'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PreArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PreArticle'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PostArticle']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PostArticle'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PostQualifier']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PostQualifier'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Suffix']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Suffix'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PostDirectional']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PostDirectional'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['SuiteType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_SuiteType'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['SuiteNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_SuiteNumber'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PostOfficeBoxType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PostOfficeBoxType'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PostOfficeBoxNumber']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PostOfficeBoxNumber'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['City']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_City'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['ConsolidatedCity']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_ConsolidatedCity'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['MinorCivilDivision']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_MinorCivilDivision'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['CountySubRegion']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_CountySubRegion'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['County']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_County'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['State']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_State'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Zip']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Zip'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['ZipPlus1']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_ZipPlus1'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['ZipPlus2']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_ZipPlus2'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['ZipPlus3']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_ZipPlus3'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['ZipPlus4']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_ZipPlus4'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['ZipPlus5']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_ZipPlus5'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Area']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Area'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['AreaType']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_AreaType'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['GeometrySRID']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_GeometrySRID'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Geometry']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Geometry'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Source']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Source'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['Vintage']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_Vintage'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PrimaryIdField']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PrimaryIdField'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['PrimaryIdValue']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_PrimaryIdValue'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['SecondaryIdField']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_SecondaryIdField'))
    pm.expect(res['OutputGeocodes'][0]['ReferenceFeature']['SecondaryIdValue']).to.equal(pm.iterationData.get('OutputGeocodes_0_ReferenceFeature_SecondaryIdValue'))

});